/*!
 * vue-notify v1.0.1
 * (c) 2016 mark fluehmann
 * Released under the MIT License.
 * 
 * Install: 
 * var VueNotify = require('vue-notify');
 * Vue.use(VueNotify);
 * window.notify = new VueNotify({
 *   maxLength: 3 / set max visible notification messages
 * });
 *
 * Usage:
 * somewhere in the DOM place a v-notify tag like
 * <v-notify :notifications="notifications"></v-notify>
 *
 * publish notification messages from anywhere in your code with
 * notify.publish( { object: 'text to display', action: 'save', type: 'error'} );
 * - object: message to display
 * - action: for translation reasons you could use action that will be appended to message
 * - type: general, success, warning, error
 *
 * Return Message:
 * Notification messages will be displayed within the v-notify tag
 * 
 */

 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.VueNotify = factory();
}(this, function () { 'use strict';

    /* export default for holding the Vue reference */
    var instance = {};

    /**
    * Notify constructor
    * @param {Object} [options]
    */
    var Notification = (function () {
        function Notification() {

            /* global references */
            this.notifications = [];
            this.types = ['general', 'success', 'warning', 'error'];

            /* option defaults */
            var defaults = {
                /* maximum length of notification buffer */
                maxLength: 5,
                /* css classes for notification types */
                classes: {
                    general: 'alert-general',
                    success: 'alert-success',
                    warning: 'alert-warning',
                    error: 'alert-error',
                }
            };

            /* extend defaults with given options */
            this.options = {};
            if (arguments[0] && typeof arguments[0] === "object") {
                this.options = extendDefaults(defaults, arguments[0]);
            }
        }

        /**
         * Extend defaults with given custom options
         * @param  object source       Notification Object defaults
         * @param  object properties   custom options
         * @return object              combined new defaults
         */
        function extendDefaults(source, properties) {
            for (var property in properties) {
                if (properties.hasOwnProperty(property)) {
                    source[property] = properties[property];
                }
            }
            return source;
        }

        Notification.prototype.publish = function publish(notification) {
            if( typeof notification != 'object' )
                return;

            var noty = {};

            /* do sanity check and append notification object and action */
            if( notification.hasOwnProperty('object'))
                noty['message'] = notification['object'];

            if( notification.hasOwnProperty('action'))
                noty['message'] += ' ' + notification['action'];

            /* do sanity check and append notification type */
            if( notification.hasOwnProperty('type') ) {
                var type = (this.types.indexOf(notification['type']) > 0) ? notification['type'] : 'general';
                noty['class'] = this.options.classes[type];
            }

            /* publish notification if not empty */
            if( noty != {} ) {
                this.notifications.unshift(noty);
                if( this.notifications.length > this.options.maxLength )
                    this.notifications.splice(this.options.maxLength, 1);
            }
            //console.log(this.notifications);
        };

        return Notification;

    })();

    function applyOverride (Vue) {
        var _util = Vue.util;
        var _defineReactive = _util.defineReactive;

        /* override Vue's init */
        var init = Vue.prototype._init;
        Vue.prototype._init = function (options) {
             init.call(this, options);
        };

        /* override Vue's destroy process */
        var destroy = Vue.prototype._destroy;
        Vue.prototype._destroy = function () {
            destroy.apply(this, arguments);
        };
    };

    function registerComponents(Vue) {
        Vue.component('v-notify', {
            template: 
                '<div class="notifications">' +
                    '<ul>' +
                        '<li v-for="(index, notification) in notifications" id="noty-{{index}}" :class="notification.class" @click="remove(index)">' +
                            '{{ notification.message }}' +
                        '</li>' +
                    '</ul>' +                
                '</div>',
            props: ['notifications'],
            ready: function() {
                var interval = setInterval(this.autoRemove, 2500);
            },
            methods: {
                autoRemove: function() {
                    var length = this.notifications.length;
                    if( length > 0 ) {
                        this.remove( length-1 );
                    }
                },
                remove: function(index) {
                    var el = document.getElementById('noty-'+index);
                    el.classList.add('fade-out');
                    var that = this;
                    setTimeout(function() {
                        that.notifications.splice(index,1);
                    },500);
                }
            }
        })
    };

    /* Installation */
    Notification.installed = false;
    Notification.install = function (Vue) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        if (Notification.installed) {
          warn('already installed.');
          return;
        }

        applyOverride(Vue);
        registerComponents(Vue);
 
        instance.Vue = Vue;
        Notification.installed = true;
    };

    /* set plugin version */
    Notification.version = '1.0.0';

    /* auto install */
    if (typeof window !== 'undefined' && window.Vue) {
        window.Vue.use(Notification);
    }

    return Notification;

}));